#################################
DCP - Start Date : 3rd July 2023
#################################

#######################
Day-1 - 3rd July 2023
#######################

		Introduction to DevOps!!!
		
		Software Development LifeCycle!
		
		Software --> Application Software 
						- Desktop Application
						- Mobile Application
						- Web Application		-- 
				 --> System Software 
						- Chip Level Programming Application
						- OS Level Programming Application
						- Middleware Products
						
		Software Development LifeCycle! 
			Web Application --> Statice Web page / blog page
			
		SDLC :::
		
			Requirement Analysis
			Design
			Code/Development 
			Test 
			Deployment/Implementaion 
			monitor/Maintain
			
		Waterfall Model (Desktop Application)			--> Linear in fashion.
		
		Project-1 
			Requirement Analysis		--> (6month)
			Design
			Code/Development 			--> 3rd month
			Test 
			Deployment/Implementaion 
			monitor/Maintain
			
		Project-2			
			Requirement Analysis		--> (6month)
			Design
			Code/Development 			--> 3rd month
			Test 
			Deployment/Implementaion 
			monitor/Maintain
			
		Agile Methodologies :::
		
		Iterations 1:	(Module)
			Requirement Analysis
			Design
			Code/Development 
			Test 
						Deployment/Implementation 
						monitor/Maintain

		Iterations 2:
			Requirement Analysis
			Design
			Code/Development 
			Test 
						Deployment/Implementation 
						monitor/Maintain
			
		Iterations 3:
			Requirement Analysis
			Design
			Code/Development 
			Test 
						Deployment/Implementation 
						monitor/Maintain
			
		Using Agile Methodologies we can able to achieve Continuous Delivery. But, NOT Continuous Deployment.	
		
		
		- Continuous Delivery 		
		- Continuous Deployment
		
		
		DevOps 
		
		- Web Application --> E_Commerce Portal
		
		Tele-comm Domain
			Tele-comm Service Provider1 --> 
			Tele-comm Service Provider2 -->
			Tele-comm Service Provider3 -->
			
		DevOps :: -- Process Perspective ::: 
		
		DevOps Engg. :::
		
				Build a colaboration between the teams::::
		
		SDLC :
			Teams :::
			
				- Business Analyst
				- Developers
				- QA - Testing
				- Operation Team
				- DBA 
				- Infra Architects
				- Release Management Team 
				- Maintain/Deployment 
				
			Technically :
			
				- Infra-Structure Management Team 			===> Provision/Create the servers --> IAC Tools(Terraform) 
				- Application Development Team				===> Coding/Development ==> IDEs --> GIT/Jenkins
				- Testing Team 								===> Automate Testing Testing - Integration with Notification Tools - Jenkins
				- Release Management Team					===> Automated Deployment - Ansible/Docker/Kubernetes
				- Production Support Team / Monitoring Team ===> Monitoring Tools - Prometheus/Grafana/App-Dynamics
				- Security Team 							===> Static scan/Dynamic Scan security Tool.
	
			DevOps Team :::
			
				E_Commerce --> Portal ==> Deployed ==> 			
				
			Environments :::
			
			Non-Prod Environment														Production Environment
			
				DEV 		(Developers use this for development)
				Test 
					QA 
					UAT 											====>
					Pre-Prod/Staging 														Prod Environment
					
		
			DevOps Stages :::
			
				Continuous Development				-> Developers --> 
						Developers --> role of developer? --> coding & unit test.
						code
						build 
						create artifacts 
						publish the artifacts to artifactory library
						Unit Testing 
						promote the code to test environment
						Notifiy the testing team 
						
					Using DevOps process ::::
						Code --> commit the code to source code repository
						DevOps will automate rest of the process.
				
				Continuous Integration
						--> allows developers to continuously integrate the code for further testing
						
				Continuous Testing 
						--> Automated testing tools - Continuous Testing
				
				Continuous Delivery/Deployment 	==> Used for production Release activities.
				
						Continuous Delivery		==> Needs Manual approval for Production Release.
						Continuous Deployment	==> Automated Deployment to prod - Without any manual Approval.				
										This can be achieve based on Application Architecture.
				Continuous Monitoring
						--> Monitor the Infra-Structure & Application 
			
			
		Application Architecture ::
			
				- Monolith Application Architecture
				
						Software Application --> composed of various Modules. 
						These are tightly coupled applications.
				
				- Micro-Service Based Application Architecture
				
				Applications - are splitted into various services ::
				
			amazon.com :: - Web_Application :::
			
			- Sign_up			--> Micro-Service (3-tier Application- frontend/Application_logic/backend) -> Independently developed/Tested/Deployed to Prod
			- Sign-In 
			- Product Search
			- Add to cart 
			- place the order 
			- payment 
			- confirm the order 
			- track the order
			
			
#######################
Day-2 - 4th July 2023
#######################		
		
		DevOps is a software Development Strategy, that helps to promote the colaboration between the Development Team and Operations Team to achieve Continuous Integration, Continuous Delivery/Deployment, in more automated fashion.
		
		DevOps Stages ::::
		
		Continuous Integration
		Continuous Delivery/Deployment
		
			amazon.com :: - Web_Application :::
			
			- Sign_up			--> Micro-Service (3-tier Application- frontend/Application_logic/backend) -> Independently developed/Tested/Deployed to Prod
			- Sign-In 			--> Micro-Service ( Developer1 ) -> Independently developed/Tested/Deployed to Prod - src code repo.
			- Product Search
			- Add to cart 
			- place the order 
			- payment 
			- confirm the order 
			- track the order
			
		Application Owners/Architects --> 
		
				Continuous Delivery/Deployment 	==> Used for production Release activities.
				
						Continuous Delivery		==> Needs Manual approval for Production Release.
						Continuous Deployment	==> Automated Deployment to prod - Without any manual Approval.				
										This can be achieve based on Application Architecture.
										
		
		Before we move the app to prod., 
			Security Audit ==> 
			
		
		
		Banking Applications ==> Online services 
		
				Prod_Deployment window ==> 4hr to 6 hrs.	===> Non-Business Hours 
		
		amazon		
		netflix
		facebook
		google   		Continuous Deployment 
		
			Assessment ==> 
			
			
		Tools Used :::
		
			Continuous Development						IDEs, GIT, Jenkins 
							Eclipse based IDEs 	--> Eclipse, Visual Studio Code, Pycharm, Visual Studio 
							Application Build 	--> Process of Compiling the Source Code and Creating Artifacts.
							Eg.: Java Web Application - Maven/Springboot app framework (High Level Language)
									Compile
									create artifacts --> (Binaries - *.war/*.jar/*.dll/*.exec)									
									Build Tools ==> Maven Build Tool
							
			Continuous Integration
							GIT,Jenkins 
							Testing Environment
								QA 		
								UAT 
							
			
			Continuous Delivery/Deployment
							Jenkins, Ansible,Docker,Kubernetes
							Deployment ??? 
							
								Just a process of copying the artifacts from one environment to another.
							
					Non-Prod Environment														Production Environment
					
						DEV 		(Developers use this for development)
						Test 
							QA 
							UAT 											====>
							Pre-Prod/Staging 														Prod Environment(Release)
										
			Continuous Testing
							Jenkins, Junit, TestNG, Selenium Tools 
						
			Continuous Monitoring
							Jenkins, Prometheus/Grafana/App-Dynamics					
			
			Jenkins --> Build Orchestration Tool 
			
			DevOps ==> 
						People,DevOps Process, DevOps Tools
						
						
			DevOps Tools :::
			
				--> Open Source DevOps Tools / Self-Managed Tools/Service				
						Free --> GIT,Jenkins,Ansible,Docker,Kubernetes,Terraform,Prometheus/Grafana
				
				--> Managed Services 			Licensed products --> 
						Provided by service providers
							AWS 	Codepipeline,codecommit...
							Azure   Az DevOps Services 
							GCP 	Google DevOps Services
							
							
			waterfall, Agile, DevOps, DevSecOps, SRE, GitOps, AIOps, MLOps
			
			
			DevOps Roles & Responsibilities::
			
			DevOps Associate 				Initial Level
			Sr. DevOps Associate
			DevOps Engineer
			DevOps Lead 
			
			Sr. DevOps Lead 
			DevOps Architects
			DevOps Consultants
			SRE 
			
			
Next ::: Version Control System using GIT ::::


			Lab Requirements :::
				
				Create GITHub Account			==> github - Remote git repository
				https://github.com/
				
				AWS Cloud Platform:			 
				https://aws.amazon.com/console/	
						1. Create Free Tier Account in AWS.
						2. Launch Virtual Machines - EC2 Instances.
				
				SSH Client to access Virtual Machines
						SSH Clients are used to access remote servers.
							Install :  putty/			-
									   mobaXterm		--> all windows users use MobaXterm
									   https://mobaxterm.mobatek.net/download.html
															Mac/Linux Users use the terminals
							
				
				Install GIT in local Windows Machine
				
				DockerHub Account https://mobaxterm.mobatek.net/download.html
				
				
				Excellent 		1
				Good 			0
				Avg				-1
				Bad				-1
				
				
				
		


			
#######################
Day-3 - 5th July 2023
#######################	

		Version Control System using GIT - Cont...
		
			- What is VCS 
			- Types of VCS 
			- GIT 
			- How GIT add values to Development and DevOps
			- Installation of GIT 
			- Misc GIT Commands.
			
		Continuous Development ::::
		
			Developer --> IDEs for coding.
			
				index.html ==>		saved a  just a flat file. tested it successfully.
				
				<html>
				---
				---
				-
				---
				asdfasd
				asdfasdf
				
				asdfasdfsd
				
				-
				-
				</html>
				
			Version control the file.
			
				- index.html_v1.0
				- index.html_v1.1
				
			Version Control System:
			
				- It is used to Track the Changes
						- User_ID
						- Date/Time of Changes 
						- Unique Tag/Version#/Commit_ID
				- It is used to Version Control the file
				
			Types of Version Control System :::
			
				Local Version Control System
				Centralized Version Control System
				Distributed Version Control System
				
				
			index.html  --> added 5 lines 
				v1.0
			
			++5 
			
				v1.1
				
			GIT :::
				- Is Open Source Distributed Version Control System 
				- It is used to Manage & Version Control the Source Code Changes
				- It is used to Track the Changes 
				- It is used to Perform Parallel Development.(Branching)
				
			Type of Distributed VCS ::::
			
			
			GIT --> Manage & Version Control the Source Code Changes
			
				GIT File Workflow ::
				
				Create any file :::
				
				Physical Location of the file 
				
				Local Machine 																									Remote Server
				
				Working Space/Directory							Staging/Index Area 					Local Repository		==> Remote Repository
				
				index.jsp				--Add this file to >> 	index.jsp 	 		--commit to >>   index.jsp_v1.0			==> index.jsp_v1.0
				
				
				GIT Cli in Local Machine (Windows/Linux/Mac)
				
				Remote Server :::
				
				GIT GUI Version of GIT.
				Eg.: 
					GITHUB is one of the remote repositories.
					Bitbucket 
					Az repositories
					AWS Code Commit 
				
				
				GIT Branching Strategies ::
				
				GIT Remote Repository Handling ::
		
		
				Local Machine 																									Remote Server
				
				Working Space/Directory							Staging/Index Area 					Local Repository		==> Remote Repository file1.txt
				
				
				git fork 		--> It is used to clone/copy one entire remote repo to another remote repo.
			
				git clone 		--> It is used to clone/copy the entire remote repo. into local machine(Updates both working dir and local repo)
				
				git add 		--> add the changes from working dir. to staging area
				
				git commit 		--> commit the changes from staging area to local repo.
				
				git push		--> push the changes from local repo to remote repo.				
				
				git fetch/pull	
					Used to get the incremental changes from remote repo to local machine.
				
				git fetch 	
					- It just check if there is any incremental changes exist in remote repo.
					- If any changes exist, it will update the changes in only local repo.- It will NOT update the working dir.
				
				git pull
					- It just check if there is any incremental changes exist in remote repo.
					- If any changes exist, it will update the changes in local repo. as well as in the working dir.
					
					
				git fork 		--> It is used to copy one remote repo to another remote repo.
					
					
			Developers Workload ?????			
			
				- New project 	
				
				- Enhancement Project 				
				- Bugfix 
				
		
			remote repo :::
			
				index.html --> (10 lines)	10KB   ==> ++10 Lines 
							   (20 lines)   20KB
				
			Cloned to my local machine:
			
				index.html --> (10 lines)	10KB
				
			git pull
			
				index.html --> (10 lines)	10KB (New changes from remote)
				index.html --> (20 lines)	20KB
				
				
		Working with git ::::
		
		
		Local Machine 																						
			
		Working Space/Directory							Staging/Index Area 					Local Repository
		
		
		- Install GIT :::
		
			Install GIT in ur local machine.
			https://git-scm.com/downloads
			
			For Windows Machine :::
			
				GIT Bash
				GIT Cli
				GIT GUI 
			
			Creata Project Workspace folder 
				project_Repos
				
			git --version
				
			
#######################
Day-4 - 6th July 2023
#######################	


		Working with GIT :::
		
		GIT Cli 
		
		Focus of Local git repositories :::
			
			Installed GIT :::
			
			using Windows Machine. :::
			
			shell scripts/commands 		Linux 
			
			powershell scripts/commands Windows
			
			
			
		1. Create/Initialize New local Repository
		
			git init		==> Initialize a new local repository.
								It create .git
								It create a default branch - master.
			
			
			Local Machine ::
			Working Space/Directory							Staging/Index Area 					Local Repository
			
			file1.txt 					git add 
			
			
			GIT :::
				- Is Open Source Distributed Version Control System 
				- It is used to Manage & Version Control the Source Code Changes
				- It is used to Track the Changes 
				- It is used to Perform Parallel Development.(Branching)			
				
				
			git init 
			
			git add 
				
			Global Configuration::		--> Settings are applicable to all the repositories in local machine			
				git config --global user.name "Loksai"
				git config --global user.email "Loksaieta@asdfas.com"
				
			git commit 
			
			git status
			
			git log 
			
			HEAD --> is pointer maintained by GIT to track the changes.
						HEAD always points to the latest commit of the current branch.
						
			Track the Changes :::
			
			git log
			
			
			git config :::
			
				Local Configuration
				Global Configuration
			
				
			Global Configuration::		--> Settings are applicable to all the repositories in local machine			
				git config --global user.name "Loksai"
				git config --global user.email "Loksaieta@asdfas.com"
						
			Local Configuration::		--> Settings are applicable only to a specific repository in local machine
				git config user.name ""
				git config user.email ""
						
						
			git ls-files 
			
			ls 
			
			
			git add :::
			
				git add <file1.txt> <file2.txt>
				
				git add <file1.txt>
				
				git add *.txt 
				git add *.java 
				git add .
				
			Remove files from staging area :::
			
			git rm --cached <file1.txt>		==> jus removes from staging area, but the file will be retained in working dir.
			git rm -f <file1.txt> 			==> removes from staging area, as well as from working dir.
			
			
			git log :::
			
			git show <commit_id> 		==> used to get the details of specific commit point.
			
			
			git log --oneline
			
			git log --stat
			
			git log -1
			
			
			.gitignore file :
			
					--> Is used to maintain the list of files that can be ignored by git.
					
			Java_Project_WebAppln :		3 -tier --> Database. 
				src/*.java
				resource/*.html 
				target/*.war
				app.properties
				secrets
				mydb_crentialfile
				
			git add 
			
			git commit 
			
			git push ==> 
			
			.gitignore 
				*.war 
				target/
				secrets
				mydb_crentialfile
				
			echo "rec1" >> s1.txt 
			vi - editor 

Summary:::
			
  433  mkdir dcp-3rd-july
  434  cd dcp-3rd-july/
  435  pwd
  436  mkdir repo1
  437  clear
  438  ls
  439  cd repo1/
  440  pwd
  441  cd ..
  442  mkdir repo2
  443  ls
  444  pwd
  445  git --version
  446  cd e:
  447  cd dcp-3rd-july/
  448  mkdir projrepo1
  449  cd projrepo1/
  450  pwd
  451  cd ..
  452  ls
  453  rm -rf repo2
  454  ls
  455  clear
  456  ls
  457  cd projrepo1/
  458  ls
  459  clear
  460  ls
  461  ls -a
  462  git init
  463  ls -a
  464  cd .git
  465  ls
  466  cd ..
  467  ls
  468  clear
  469  cd ..
  470  mkdir projrepo2
  471  cd projrepo2
  472  ls
  473  cd ..
  474  cd projrepo1/
  475  clear
  476  cd ..
  477  cd projrepo
  478  cd projrepo2
  479  clear
  480  git init
  481  ls -a
  482  echo "Hello"
  483  ls
  484  echo "Hello" >> file1.txt
  485  ls
  486  git status
  487  git add file1.txt
  488  git status
  489  git commit -m "Created file1.txt"
  490  git status
  491  git log
  492  cd ..
  493  clear
  494  ls
  495  clear
  496  mkdir projrepo3
  497  cd projrepo3
  498  clear
  499  pwd
  500  git status
  501  git init
  502  git status
  503  ls
  504  echo "rec1" >> file1.txt
  505  ls
  506  git status
  507  git add file1.txt
  508  git status
  509  git commit -m "Added file1.txt"
  510  git status
  511  git log
  512  echo "rec1" >> file2.txt
  513  git add file2.txt
  514  git commit -m "Created file2.txt"
  515  git log
  516  echo " rec1" >> file3.txt
  517  git add file3.txt
  518  git commit -m "created file3.txt"
  519  git log
  520  git status
  521  echo "rec1" >> file4.txt
  522  git status
  523  git add file4.txt
  524  git status
  525  git commit -m "created file4.txt"
  526  clear
  527  git log
  528  git config --global user.email "Loksaieta@asdfas.com"
  529  git config --global user.name "Loksaieta"
  530  echo "rec1" >> file8.txt
  531  git add file8.txt
  532  git commit -m "created file8.txt"
  533  git log
  534  clear
  535  git log
  536  clear
  537  cd ..
  538  mkdir projrepo4
  539  cd projrepo4
  540  git init
  541  echo "rec1" >> s1.txt
  542  git add s1.txt
  543  git commit -m "CM1"
  544  git log
  545  git config user.name "dcpuser1"
  546  echo "rec" >> s2.txt
  547  git add s2.txt
  548  git commit -m "CM2"
  549  git log
  550  cd ..
  551  mdkir projrepo5
  552  mkdir projrepo5
  553  cd projrepo5
  554  git init
  555  echo "rec1" >> f1.txt
  556  git add f1.txt
  557  git commit -m "CM1"
  558  git log
  559  git config list
  560  git config --list
  561  clear
  562  git config --list
  563  clear
  564  git log
  565  clear
  566  cd ..
  567  ls
  568  git status
  569  cd projrepo5
  570  git log
  571  clear
  572  ls
  573  git log
  574  clear
  575  ls
  576  git ls-files
  577  echo "rec1" >> f2.txt
  578  ls
  579  git ls-files
  580  git status
  581  git add f2.txt
  582  git ls-files
  583  git status
  584  clear
  585  git status
  586  git commit -m "CM2"
  587  clear
  588  git log
  589  clear
  590  echo "rec1" >> s1.txt
  591  echo "rec1" >> s2.txt
  592  echo "rec1" >> s3.txt
  593  echo "rec1" >> a1.java
  594  echo "rec1" >> a2.java
  595  echo "rec1" >> q1.doc
  596  echo "rec1" >> q1.jsp
  597  clear
  598  ls
  599  git ls-files
  600  git status
  601  git add *.txt
  602  git status
  603  git ls-files
  604  git add .
  605  git ls-files
  606  git status
  607  git rm --cached q1.doc
  608  git ls-files
  609  git status
  610  ls
  611  git rm -f q1.jsp
  612  git ls-files
  613  ls
  614  git status
  615  git add .
  616  git log
  617  git commit -m "CM3"
  618  clear
  619  git log
  620  git show cbfa00d
  621  git show 3c27266d
  622  clear
  623  git log
  624  git log --oneline
  625  git log --stat
  626  clear
  627  git log --oneline
  628  git log -2
  629  git log -1
  630  git log --oneline -2
  632  clear
  633  git log --oneline -2
  634  git log --stat -1
  635  git log --oneline -2
  636  git show 3c27266
  637  clear
  638  cd ..
  639  mkdir
  640  mkdir projrepo6
  641  cd projrepo6
  642  git init
  643  ls
  644  vi .gitignore
  645  cat .gitignore
  646  ls -a
  647  git status
  648  git add .
  649  git commit -m "Initial commit - added .gitignore"
  650  git status
  651  git log --oneline
  652  cat .gitignore
  653  echo "rec1" >> file1.txt
  654  echo "rec1" >> s1.doc
  655  git status
  656  echo "rec1" >> sample1.txt
  657  git status
  658  git add .
  659  git commit -m "cm1"
  660  clear
  661  ls
  662  vi .gitignore
  663  git add .
  664  git commit -m "updated .gitignore"
  665  echo "rec1" >> l1.txt
  666  git status
  667  ls
  668  git ls-files
  669  echo "rec1" k1.sam
  670  echo "rec1" > k1.sam
  671  git status
  672  history
		


#######################
Day-5 - 7th July 2023
#######################	

		GIT Misc. Commands Cont.....
		
		git diff --: used to find the diff between the changes.
		
		git diff 					== compare between working dir and local repo 
		
		git diff --cached 			== compare between staging area and local repo
		
		git diff <commit_id> <commit_id>	== between two commits
		
		
		
		Changes can be revoked using ::
		
			git reset :::
			
				git reset will change the commit history.
					It will remove the commits from history.
				git reset is not recommended in multi. user envi.
				git reset --hard ==> should be used only if you are sure about what you  are doing.
						In a single use envi. we can use.
				git reset will NOT create any new commit point.
			
			syntax: git reset <reset_option> <prev.commit_id>
			
				git reset --soft  :	
					==>> will remove the changes from local repo. but the changes will be present in staging area and working directory. The HEAD Pointer will be moved to the specific commit.
					
				git reset --mixed  :		(default)	
					==>> will remove the changes from local repo. and staging area, but the changes will be present in working directory. The HEAD Pointer will be moved to the specific commit.

				git reset --hard  :	
					==>> will remove the changes from local repo. as well as from staging area and working directory. The HEAD Pointer will be moved to the specific commit.
					
			git revert :::
			
				git revert <commit_id>
			
				This is also used to undo the changes.
				git revert will create new commit point based upon the revert action.
				
			What is Git Commit ?
			
				git commit -m <CM1> 		# commit msg are based on Change_Request Id - Project  description.
				
				git commit -m "CR1025-Created file1.txt"
				
				git commit --amend -m <New Commit Msg>
				
				
		GIT Branching Techniques ::::
		
			It help perform parallel development.
			It help to create a isolated envi. to work on independent changes without impacting others.
			
			git init ==> master 
			
			
			How to Create git branch:
			
			git switch -c <branch_name>
			git checkout -b <branch_name>
			git branch <branch_name>
			
		GIT Branching Strategies ::::
		
		
		Local Machine :::
		
		Created a git repo ::
		
			Default branch is master branch.
			
			master branch is considered as prod version of source code.

				feature branch. 
				
			mywebapp_repo (master)		
			
				sign.java 
				
				create feature1 --
				
					sign.java 
			
				create feature2 --
				
					sign.java 			
			
			repo1:
			
			master 			sign.java
				feature1		sign.java
				feature2		sign.java
				feature3


			master 			sign.java			
				Development_Branch
					feature1		sign.java
					feature2		sign.java
					feature3		sign.java

				
			master 
				Integration_Branch(developer1,developer2)
					developer1
						feature1
						feature2
						feature3			

					developer2
						feature1
						feature2
						feature3				
					
			master 			
				Release_Branch 
					Integration_Branch1(developer1,developer2)				Team1
						developer1
							feature1
							feature2
							feature3			

						developer2
							feature1
							feature2
							feature3				
					
					Integration_Branch2(developer1,developer2)				Team2
						developer1
							feature1
							feature2
							feature3			

						developer2
							feature1
							feature2
							feature3				
		
		git merge :::			git merge command should be executed from target branch.
		

#######################
Day-6 - 10th July 2023
#######################	

		GIT Branch :::
		
		 - Create Branches 
		 - perform Merge 
		 - Handling Merge Conflicts
		 - Best practices 
		 
		 
		Git Merge ::: -- Is used the merge the changes from the current to the target branch.
						 git merge command shd be executed from the target branch.
							git switch master
						git merge feature1 
						
		Handling Merge Conflicts :::	Occurs when more than once user/branch try to merge the same file/record in the target branch. 
		
		To fix Merge conflict :
			- Identify the file that is causing merge conflict.
			- Review that file content and decide which/who's changes has to be retained.
			- Update the file .
			- Perform GIT add and commit the changes.
			
		--> We should always prevent the merge conflicts....!
		
		--> Features to prevent merge conflict.
		
		git Rebase :::			git rebase command shd be executed from the current branch.
		
			Repo1 : 
				master 		--> cm1,cm2,cm3
							
							Based on feature1 :
								cm1,cm2,cm3,cm1f1,cm2f1,cm3f1
							
							Based on feature2 :							
								cm1,cm2,cm3,cm1f2,cm2f2,cm3f2,cm1f1,cm2f1,cm3f1
								
							Expectation :
								cm1,cm2,cm3,cm1f1,cm2f1,cm3f1,cm1f2,cm2f2,cm3f2
							
								
					feature1 	--> cm1,cm2,cm3,cm1f1,cm2f1,cm3f1
					
									git rebase master
									git switch master 
									git merge feature1 :
			
					feature2 	--> cm1,cm2,cm3,cm1f2,cm2f2,cm3f2

									git rebase master
										cm1,cm2,cm3,cm1f1,cm2f1,cm3f1,cm1f2,cm2f2,cm3f2
										
									git switch master 
									git merge feature2 :
									
									
		git squash :::	--> Is used to combine the commits into one commit point.
		
			Repo1 ::: 
				master --> cm1,cm2,cm3 
				
							cm1,cm2,cm3,f1c1,f1c2,f1c3,f1c4,f1c5,....................,f1c100
				
					feature1 --> cm1,cm2,cm3 
					
					git add .
					
					git commit 

					feature1 --> cm1,cm2,cm3,f1c1,f1c2,f1c3,f1c4,f1c5,....................,f1c100
		
						git switch master
						git merge feature1 
			
		
		Before Merge/While working in current Branch :::
		
			feature1 --> cm1,cm2,cm3,f1c1,f1c2,f1c3,f1c4,f1c5
			
						git rebase -i HEAD~5
						
						cm1,cm2,cm3,f1c1,CM1F1,f1c1,f1c2,f1c3,f1c4,f1c5
						
						git rebase -i HEAD~5
						cm1,cm2,cm3,f1c1,CM1F1,CM2F1		
		
		While Merging :::	
		
			feature1 --> cm1,cm2,cm3,f1c1,f1c2,f1c3,f1c4,f1c5
			
					git switch master 
					git merge --squash feature1
					git commit -m "CM1F1"
			
			
			master cm1,cm2,cm3,REL0723
			
				Release_Branch 
						cm1,cm2,cm3,T1CM1,T2CM1

					Integration_Branch1(developer1,developer2)																			Team1
								cm1,cm2,cm3,T1d1,T1d2

						developer1 cm1,cm2,cm3,f1d1:c1,2,3,4,5,6,7,8,9,f2d1:c1,2,3,4,5,6,7,8,9,f3d1:c1,2,3,4,5,6,7,8,9
							feature1 cm1,cm2,cm3,f1d1:c1,2,3,4,5,6,7,8,9
							feature2 cm1,cm2,cm3,f2d1:c1,2,3,4,5,6,7,8,9
							feature3 cm1,cm2,cm3,f3d1:c1,2,3,4,5,6,7,8,9			

						developer2 cm1,cm2,cm3,f1d2:c1,2,3,4,5,6,7,8,9,f2d2:c1,2,3,4,5,6,7,8,9,f3d2:c1,2,3,4,5,6,7,8,9	
							feature1 cm1,cm2,cm3,f1d2:c1,2,3,4,5,6,7,8,9
							feature2 cm1,cm2,cm3,f2d2:c1,2,3,4,5,6,7,8,9
							feature3 cm1,cm2,cm3,f3d2:c1,2,3,4,5,6,7,8,9				
					
					Integration_Branch2(developer1,developer2)																			Team2
								cm1,cm2,cm3,T2d1,T2d2

						developer1 cm1,cm2,cm3,f1d1:c1,2,3,4,5,6,7,8,9,f2d1:c1,2,3,4,5,6,7,8,9,f3d1:c1,2,3,4,5,6,7,8,9
							feature1 cm1,cm2,cm3,f1d1:c1,2,3,4,5,6,7,8,9
							feature2 cm1,cm2,cm3,f2d1:c1,2,3,4,5,6,7,8,9
							feature3 cm1,cm2,cm3,f3d1:c1,2,3,4,5,6,7,8,9			

						developer2 cm1,cm2,cm3,f1d2:c1,2,3,4,5,6,7,8,9,f2d2:c1,2,3,4,5,6,7,8,9,f3d2:c1,2,3,4,5,6,7,8,9	
							feature1 cm1,cm2,cm3,f1d2:c1,2,3,4,5,6,7,8,9
							feature2 cm1,cm2,cm3,f2d2:c1,2,3,4,5,6,7,8,9
							feature3 cm1,cm2,cm3,f3d2:c1,2,3,4,5,6,7,8,9	
					
		cherrypick 
		
		git cherry-pick T1CM1
		
		syntax: 
		
		git cherry-pick <commit_id> 
		
		
		Handling GIT Remote Repository ::::
			github - remote repo			GUI 
			gitlab
			bitbucket
			Az Repo 
			AWS Code Commit 
			
			
			
		Developers' Workload :::
		
			New Project		
							Create Local Repo & push it to remote repo.
			
			Enhancement/Bugfixing
							Clone the remote repo, make the necessary changes & push the chanages back to remote repo. 
			
		
		git branches 
		merge 
		rebase 
		squash 
		remote repo - create merge - pull request...
		
		
Next :: 

	Handling Local and Remote Repos. 
	stash.
	
	Jenkins - maven ....
